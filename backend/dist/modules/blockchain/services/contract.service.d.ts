import { ConfigService } from '@nestjs/config';
export declare class ContractService {
    private configService;
    private readonly logger;
    private web3;
    private escrowContract;
    private tokenContract;
    constructor(configService: ConfigService);
    private initWeb3;
    createProject(client: string, worker: string, deadline: number): Promise<any>;
    addMilestone(client: string, projectId: number, description: string, amount: string, deadline: number): Promise<any>;
    fundProject(client: string, projectId: number, amount: string): Promise<any>;
    startWork(worker: string, projectId: number): Promise<any>;
    submitMilestone(worker: string, projectId: number, milestoneId: number, evidence: string): Promise<any>;
    registerAsReviewer(address: string): Promise<any>;
    voteOnMilestone(reviewer: string, projectId: number, milestoneId: number, approved: boolean): Promise<any>;
    disputeMilestone(address: string, projectId: number, milestoneId: number): Promise<any>;
    resolveMilestoneDispute(admin: string, projectId: number, milestoneId: number, approveWork: boolean): Promise<any>;
    disputeProject(address: string, projectId: number): Promise<any>;
    resolveDispute(admin: string, projectId: number, recipient: string, clientAmount: string, workerAmount: string): Promise<any>;
    refundProject(admin: string, projectId: number): Promise<any>;
    getProject(projectId: number): Promise<{
        id: any;
        client: any;
        worker: any;
        totalAmount: string;
        deadline: any;
        status: string;
        clientApproved: any;
        workerApproved: any;
        completedMilestones: any;
        totalMilestones: any;
    }>;
    getMilestone(projectId: number, milestoneId: number): Promise<{
        id: any;
        description: any;
        amount: string;
        deadline: any;
        status: string;
        evidence: any;
        positiveVotes: any;
        negativeVotes: any;
        paid: any;
    }>;
    getMilestoneReviewers(projectId: number, milestoneId: number): Promise<any>;
    getProjectMilestones(projectId: number): Promise<any>;
    getReviewerReputation(address: string): Promise<any>;
    getTokenBalance(address: string): Promise<string>;
    transferTokens(from: string, to: string, amount: string): Promise<any>;
    private convertProjectStatus;
    private convertMilestoneStatus;
}
